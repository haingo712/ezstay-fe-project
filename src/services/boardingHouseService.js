// src/services/boardingHouseService.js
import { boardingHouseAPI } from "@/utils/api";

class BoardingHouseService {
  constructor() {
    this.baseUrl = "/api/BoardingHouses";
  }

  // L·∫•y t·∫•t c·∫£ boarding houses
  async getAll() {
    try {
      console.log("üè† Fetching all boarding houses...");
      const response = await boardingHouseAPI.getAll();
      console.log("‚úÖ Boarding houses fetched successfully:", response);
      return response;
    } catch (error) {
      console.error("‚ùå Error fetching boarding houses:", error);
      throw error;
    }
  }

  // L·∫•y boarding house theo ID
  async getById(id) {
    try {
      console.log(`üè† Fetching boarding house with ID: ${id}...`);
      const response = await boardingHouseAPI.getById(id);
      console.log("‚úÖ Boarding house fetched successfully:", response);
      return response;
    } catch (error) {
      console.error(`‚ùå Error fetching boarding house ${id}:`, error);
      throw error;
    }
  }

  // L·∫•y boarding houses theo owner ID
  async getByOwnerId(ownerId) {
    try {
      console.log(`üè† Fetching boarding houses for owner: ${ownerId}...`);
      const response = await boardingHouseAPI.getByOwnerId(ownerId);
      console.log("‚úÖ Owner's boarding houses fetched successfully:", response);
      return response;
    } catch (error) {
      console.error(`‚ùå Error fetching boarding houses for owner ${ownerId}:`, error);
      throw error;
    }
  }

  // T·∫°o boarding house m·ªõi
  async create(data) {
    try {
      console.log("üè† Creating new boarding house...", data);
      const response = await boardingHouseAPI.create(data);
      console.log("‚úÖ Boarding house created successfully:", response);
      return response;
    } catch (error) {
      console.error("‚ùå Error creating boarding house:", error);
      throw error;
    }
  }

  // C·∫≠p nh·∫≠t boarding house
  async update(id, data) {
    try {
      console.log(`üè† Updating boarding house ${id}...`, data);
      const response = await boardingHouseAPI.update(id, data);
      console.log("‚úÖ Boarding house updated successfully:", response);
      return response;
    } catch (error) {
      console.error(`‚ùå Error updating boarding house ${id}:`, error);
      throw error;
    }
  }

  // X√≥a boarding house
  async delete(id) {
    try {
      console.log(`üè† Deleting boarding house ${id}...`);
      const response = await boardingHouseAPI.delete(id);
      console.log("‚úÖ Boarding house deleted successfully");
      return response;
    } catch (error) {
      console.error(`‚ùå Error deleting boarding house ${id}:`, error);
      throw error;
    }
  }

  // T√¨m ki·∫øm boarding houses (c√≥ th·ªÉ m·ªü r·ªông sau)
  async search(params) {
    try {
      console.log("üîç Searching boarding houses...", params);
      const queryString = new URLSearchParams(params).toString();
      const response = await boardingHouseAPI.getAll();
      // Client-side filtering for now, can be moved to backend later
      return response.filter(house => {
        if (params.q && !house.houseName.toLowerCase().includes(params.q.toLowerCase()) && 
            !house.description.toLowerCase().includes(params.q.toLowerCase())) {
          return false;
        }
        return true;
      });
    } catch (error) {
      console.error("‚ùå Error searching boarding houses:", error);
      throw error;
    }
  }


}

const boardingHouseService = new BoardingHouseService();
export default boardingHouseService;
